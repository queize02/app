1. Installation des dépendances

Si ce n’est pas déjà fait :

npm install discord.js @discordjs/voice ffmpeg-static node-fetch

2. Code complet du bot
const { Client, GatewayIntentBits } = require('discord.js');
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus } = require('@discordjs/voice');
const fetch = require('node-fetch');

const client = new Client({ intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
] });

const TOKEN_BOT = "TON_TOKEN_DISCORD";
const JELLYFIN_URL = "http://ton_serveur_jellyfin:8096";
const JELLYFIN_API_KEY = "TON_TOKEN_JELLYFIN";

client.once('ready', () => {
    console.log(`Connecté en tant que ${client.user.tag}`);
});

client.on('messageCreate', async message => {
    if (message.content.startsWith('!play')) {
        const args = message.content.split(' ').slice(1);
        const nomFilm = args.join(' ');

        const channel = message.member.voice.channel;
        if (!channel) return message.reply('Tu dois être dans un salon vocal !');

        // Recherche du film sur Jellyfin
        const searchUrl = `${JELLYFIN_URL}/Items?SearchTerm=${encodeURIComponent(nomFilm)}&IncludeItemTypes=Movie&Recursive=true`;
        const response = await fetch(searchUrl, {
            headers: { 'X-Emby-Token': JELLYFIN_API_KEY }
        });
        const data = await response.json();

        if (!data.Items || data.Items.length === 0) {
            return message.reply(`Aucun film trouvé pour "${nomFilm}"`);
        }

        const film = data.Items[0];

        // Générer le lien Jellyfin cliquable
        const lienJellyfin = `${JELLYFIN_URL}/web/index.html#!/item?id=${film.Id}`;

        // Envoyer le lien dans le chat Discord
        message.reply(`Lecture de **${film.Name}** dans le salon vocal !\nRegarde la vidéo complète ici : [Lien Jellyfin](${lienJellyfin})`);

        // Connexion au salon vocal
        const connection = joinVoiceChannel({
            channelId: channel.id,
            guildId: channel.guild.id,
            adapterCreator: channel.guild.voiceAdapterCreator,
        });

        // Créer le lecteur audio
        const player = createAudioPlayer();
        const audioUrl = `${JELLYFIN_URL}/Videos/${film.Id}/stream?static=true&api_key=${JELLYFIN_API_KEY}`;
        const resource = createAudioResource(audioUrl);

        player.play(resource);
        connection.subscribe(player);

        // Quitter le salon vocal une fois la lecture terminée
        player.on(AudioPlayerStatus.Idle, () => {
            connection.destroy();
        });
    }
});

client.login(TOKEN_BOT);

✅ Comment ça fonctionne

Tu tapes dans Discord :

!play nom_du_film


Le bot recherche le film sur ton serveur Jellyfin.

Si le film existe :

Il envoie un lien cliquable pour voir la vidéo complète.

Il joue le son du film dans le salon vocal où tu te trouves.

Une fois le film terminé, le bot quitte le salon vocal automatiquement.

Si tu veux, je peux aussi te faire une version slash command (/play) qui fait exactement la même chose, plus moderne et pratique que !play.

Veux‑tu que je fasse cette version ?

Vous avez dit :
oui mais separe les commande dans un dossier commands
ChatGPT a dit :

Parfait ! On va structurer ton bot Discord à la manière d’un bot moderne avec un dossier commands, ce qui rend le code plus clair et extensible. On créera une commande /play séparée qui :

Recherche le film sur Jellyfin.

Envoie le lien cliquable dans le chat.

Joue l’audio du film dans le salon vocal.

1. Structure du projet
my-bot/
│
├─ index.js            # fichier principal
├─ config.json         # token bot, Jellyfin URL et API key
└─ commands/
   └─ play.js          # commande /play

2. config.json
{
  "TOKEN_BOT": "TON_TOKEN_DISCORD",
  "JELLYFIN_URL": "http://ton_serveur_jellyfin:8096",
  "JELLYFIN_API_KEY": "TON_TOKEN_JELLYFIN"
}

3. index.js
const fs = require('fs');
const { Client, GatewayIntentBits, Collection } = require('discord.js');
const { TOKEN_BOT } = require('./config.json');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

// Collection pour les commandes
client.commands = new Collection();

// Charger toutes les commandes depuis le dossier commands
const commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));
for (const file of commandFiles) {
    const command = require(`./commands/${file}`);
    client.commands.set(command.data.name, command);
}

// Interaction create
client.on('interactionCreate', async interaction => {
    if (!interaction.isCommand()) return;

    const command = client.commands.get(interaction.commandName);
    if (!command) return;

    try {
        await command.execute(interaction);
    } catch (error) {
        console.error(error);
        await interaction.reply({ content: 'Erreur lors de l’exécution de la commande.', ephemeral: true });
    }
});

client.once('ready', () => {
    console.log(`Connecté en tant que ${client.user.tag}`);
});

client.login(TOKEN_BOT);

4. commands/play.js
const { SlashCommandBuilder } = require('discord.js');
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus } = require('@discordjs/voice');
const fetch = require('node-fetch');
const { JELLYFIN_URL, JELLYFIN_API_KEY } = require('../config.json');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('play')
        .setDescription('Joue un film depuis ton serveur Jellyfin')
        .addStringOption(option =>
            option.setName('film')
                .setDescription('Nom du film')
                .setRequired(true)
        ),
    async execute(interaction) {
        const nomFilm = interaction.options.getString('film');
        const member = interaction.member;

        // Vérifier que l’utilisateur est dans un salon vocal
        const channel = member.voice.channel;
        if (!channel) return interaction.reply('Tu dois être dans un salon vocal pour jouer un film !');

        // Recherche du film sur Jellyfin
        const searchUrl = `${JELLYFIN_URL}/Items?SearchTerm=${encodeURIComponent(nomFilm)}&IncludeItemTypes=Movie&Recursive=true`;
        const response = await fetch(searchUrl, { headers: { 'X-Emby-Token': JELLYFIN_API_KEY } });
        const data = await response.json();

        if (!data.Items || data.Items.length === 0) {
            return interaction.reply(`Aucun film trouvé pour "${nomFilm}"`);
        }

        const film = data.Items[0];
        const lienJellyfin = `${JELLYFIN_URL}/web/index.html#!/item?id=${film.Id}`;

        // Envoyer le lien cliquable
        await interaction.reply(`Lecture de **${film.Name}** dans le salon vocal !\nRegarde la vidéo complète ici : [Lien Jellyfin](${lienJellyfin})`);

        // Connexion au salon vocal et lecture audio
        const connection = joinVoiceChannel({
            channelId: channel.id,
            guildId: channel.guild.id,
            adapterCreator: channel.guild.voiceAdapterCreator,
        });

        const player = createAudioPlayer();
        const audioUrl = `${JELLYFIN_URL}/Videos/${film.Id}/stream?static=true&api_key=${JELLYFIN_API_KEY}`;
        const resource = createAudioResource(audioUrl);

        player.play(resource);
        connection.subscribe(player);

        player.on(AudioPlayerStatus.Idle, () => connection.destroy());
    }
};

5. Enregistrer la commande sur ton serveur

Crée un fichier deploy-commands.js :

const { REST, Routes, SlashCommandBuilder } = require('discord.js');
const fs = require('fs');
const { TOKEN_BOT } = require('./config.json');

const commands = [];
const commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
    const command = require(`./commands/${file}`);
    commands.push(command.data.toJSON());
}

const rest = new REST({ version: '10' }).setToken(TOKEN_BOT);

(async () => {
    try {
        console.log('Mise à jour des commandes...');
        await rest.put(
            Routes.applicationGuildCommands('TON_ID_APPLICATION', 'TON_ID_GUILD'),
            { body: commands }
        );
        console.log('Commandes mises à jour !');
    } catch (error) {
        console.error(error);
    }
})();


Exécute :

node deploy-commands.js


✅ Résultat

/play <nom_du_film> recherche le film sur Jellyfin.

Le bot envoie un lien cliquable pour voir le film.

L’audio du film est diffusé dans le salon vocal où tu te trouves.

Si tu veux, je peux te faire une version encore plus avancée qui gère les playlists et la lecture en queue directement dans Discord, comme un vrai lecteur de serveur multimédia.

Veux‑tu que je fasse ça ?
